// Code generated by protoc-gen-gogo.
// source: raft4si.proto
// DO NOT EDIT!

/*
	Package raft4si is a generated protocol buffer package.

	It is generated from these files:
		raft4si.proto

	It has these top-level messages:
		PBPeer
		PBMembers
		PBSnapshot
		PBPropose
		PBEntry
		PBLeadershipUpdateMessage
*/
package raft4si

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PBPeer struct {
	NodeId       uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	PeerLocation string `protobuf:"bytes,2,opt,name=peer_location,json=peerLocation,proto3" json:"peer_location,omitempty"`
}

func (m *PBPeer) Reset()                    { *m = PBPeer{} }
func (m *PBPeer) String() string            { return proto.CompactTextString(m) }
func (*PBPeer) ProtoMessage()               {}
func (*PBPeer) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{0} }

type PBMembers struct {
	MemberIdSeq uint64    `protobuf:"varint,1,opt,name=member_id_seq,json=memberIdSeq,proto3" json:"member_id_seq,omitempty"`
	Peers       []*PBPeer `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *PBMembers) Reset()                    { *m = PBMembers{} }
func (m *PBMembers) String() string            { return proto.CompactTextString(m) }
func (*PBMembers) ProtoMessage()               {}
func (*PBMembers) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{1} }

func (m *PBMembers) GetPeers() []*PBPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// wal saved snapshot struct
type PBSnapshot struct {
	Snapdata  []byte     `protobuf:"bytes,1,opt,name=snapdata,proto3" json:"snapdata,omitempty"`
	HardState []byte     `protobuf:"bytes,2,opt,name=hard_state,json=hardState,proto3" json:"hard_state,omitempty"`
	Members   *PBMembers `protobuf:"bytes,3,opt,name=members" json:"members,omitempty"`
}

func (m *PBSnapshot) Reset()                    { *m = PBSnapshot{} }
func (m *PBSnapshot) String() string            { return proto.CompactTextString(m) }
func (*PBSnapshot) ProtoMessage()               {}
func (*PBSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{2} }

func (m *PBSnapshot) GetMembers() *PBMembers {
	if m != nil {
		return m.Members
	}
	return nil
}

// Raft propose struct
type PBPropose struct {
	ProposeId uint64 `protobuf:"varint,2,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	Request   []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *PBPropose) Reset()                    { *m = PBPropose{} }
func (m *PBPropose) String() string            { return proto.CompactTextString(m) }
func (*PBPropose) ProtoMessage()               {}
func (*PBPropose) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{3} }

// wal saved Entry struct
type PBEntry struct {
	Entry     []byte `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	HardState []byte `protobuf:"bytes,2,opt,name=hard_state,json=hardState,proto3" json:"hard_state,omitempty"`
}

func (m *PBEntry) Reset()                    { *m = PBEntry{} }
func (m *PBEntry) String() string            { return proto.CompactTextString(m) }
func (*PBEntry) ProtoMessage()               {}
func (*PBEntry) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{4} }

// send to service Message struct
type PBLeadershipUpdateMessage struct {
	LocalLeader bool `protobuf:"varint,1,opt,name=local_leader,json=localLeader,proto3" json:"local_leader,omitempty"`
}

func (m *PBLeadershipUpdateMessage) Reset()                    { *m = PBLeadershipUpdateMessage{} }
func (m *PBLeadershipUpdateMessage) String() string            { return proto.CompactTextString(m) }
func (*PBLeadershipUpdateMessage) ProtoMessage()               {}
func (*PBLeadershipUpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si, []int{5} }

func init() {
	proto.RegisterType((*PBPeer)(nil), "raft4si.PBPeer")
	proto.RegisterType((*PBMembers)(nil), "raft4si.PBMembers")
	proto.RegisterType((*PBSnapshot)(nil), "raft4si.PBSnapshot")
	proto.RegisterType((*PBPropose)(nil), "raft4si.PBPropose")
	proto.RegisterType((*PBEntry)(nil), "raft4si.PBEntry")
	proto.RegisterType((*PBLeadershipUpdateMessage)(nil), "raft4si.PBLeadershipUpdateMessage")
}
func (m *PBPeer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBPeer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft4Si(data, i, uint64(m.NodeId))
	}
	if len(m.PeerLocation) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.PeerLocation)))
		i += copy(data[i:], m.PeerLocation)
	}
	return i, nil
}

func (m *PBMembers) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBMembers) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MemberIdSeq != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft4Si(data, i, uint64(m.MemberIdSeq))
	}
	if len(m.Peers) > 0 {
		for _, msg := range m.Peers {
			data[i] = 0x12
			i++
			i = encodeVarintRaft4Si(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PBSnapshot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBSnapshot) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Snapdata) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.Snapdata)))
		i += copy(data[i:], m.Snapdata)
	}
	if len(m.HardState) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.HardState)))
		i += copy(data[i:], m.HardState)
	}
	if m.Members != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintRaft4Si(data, i, uint64(m.Members.Size()))
		n1, err := m.Members.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PBPropose) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBPropose) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.Request)))
		i += copy(data[i:], m.Request)
	}
	if m.ProposeId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintRaft4Si(data, i, uint64(m.ProposeId))
	}
	return i, nil
}

func (m *PBEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entry) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.Entry)))
		i += copy(data[i:], m.Entry)
	}
	if len(m.HardState) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRaft4Si(data, i, uint64(len(m.HardState)))
		i += copy(data[i:], m.HardState)
	}
	return i, nil
}

func (m *PBLeadershipUpdateMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBLeadershipUpdateMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalLeader {
		data[i] = 0x8
		i++
		if m.LocalLeader {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Raft4Si(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raft4Si(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaft4Si(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PBPeer) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRaft4Si(uint64(m.NodeId))
	}
	l = len(m.PeerLocation)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	return n
}

func (m *PBMembers) Size() (n int) {
	var l int
	_ = l
	if m.MemberIdSeq != 0 {
		n += 1 + sovRaft4Si(uint64(m.MemberIdSeq))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovRaft4Si(uint64(l))
		}
	}
	return n
}

func (m *PBSnapshot) Size() (n int) {
	var l int
	_ = l
	l = len(m.Snapdata)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	l = len(m.HardState)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	if m.Members != nil {
		l = m.Members.Size()
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	return n
}

func (m *PBPropose) Size() (n int) {
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	if m.ProposeId != 0 {
		n += 1 + sovRaft4Si(uint64(m.ProposeId))
	}
	return n
}

func (m *PBEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	l = len(m.HardState)
	if l > 0 {
		n += 1 + l + sovRaft4Si(uint64(l))
	}
	return n
}

func (m *PBLeadershipUpdateMessage) Size() (n int) {
	var l int
	_ = l
	if m.LocalLeader {
		n += 2
	}
	return n
}

func sovRaft4Si(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaft4Si(x uint64) (n int) {
	return sovRaft4Si(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBPeer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerLocation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBMembers) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIdSeq", wireType)
			}
			m.MemberIdSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemberIdSeq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PBPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBSnapshot) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapdata = append(m.Snapdata[:0], data[iNdEx:postIndex]...)
			if m.Snapdata == nil {
				m.Snapdata = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardState = append(m.HardState[:0], data[iNdEx:postIndex]...)
			if m.HardState == nil {
				m.HardState = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = &PBMembers{}
			}
			if err := m.Members.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBPropose) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBPropose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBPropose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], data[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeId", wireType)
			}
			m.ProposeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ProposeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry[:0], data[iNdEx:postIndex]...)
			if m.Entry == nil {
				m.Entry = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft4Si
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardState = append(m.HardState[:0], data[iNdEx:postIndex]...)
			if m.HardState == nil {
				m.HardState = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBLeadershipUpdateMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBLeadershipUpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBLeadershipUpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalLeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft4Si(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft4Si
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft4Si
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaft4Si
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft4Si
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft4Si(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft4Si = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft4Si   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft4si.proto", fileDescriptorRaft4Si) }

var fileDescriptorRaft4Si = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x49, 0xfb, 0x6f, 0xd3, 0x4c, 0x52, 0xfe, 0xb0, 0x14, 0x8c, 0x05, 0x4b, 0x8c, 0x08,
	0x39, 0x48, 0x85, 0xea, 0xb9, 0x87, 0xa0, 0x42, 0xa1, 0x85, 0x90, 0xa2, 0xd7, 0xb0, 0x75, 0xc7,
	0x36, 0xd0, 0x66, 0xd3, 0xdd, 0xed, 0xc1, 0x37, 0xf4, 0xe8, 0x23, 0x48, 0x9f, 0x44, 0x76, 0x37,
	0x15, 0x6f, 0xde, 0xe6, 0xfb, 0xed, 0xe4, 0x9b, 0x6f, 0x32, 0xd0, 0x17, 0xf4, 0x4d, 0xdd, 0xcb,
	0x72, 0x5c, 0x0b, 0xae, 0x38, 0x71, 0x1b, 0x39, 0x1c, 0xac, 0xf9, 0x9a, 0x1b, 0x76, 0xab, 0x2b,
	0xfb, 0x1c, 0x3f, 0x41, 0x37, 0x4b, 0x33, 0x44, 0x41, 0xce, 0xc0, 0xad, 0x38, 0xc3, 0xa2, 0x64,
	0xa1, 0x13, 0x39, 0xc9, 0xbf, 0xbc, 0xab, 0xe5, 0x8c, 0x91, 0x2b, 0xe8, 0xd7, 0x88, 0xa2, 0xd8,
	0xf2, 0x57, 0xaa, 0x4a, 0x5e, 0x85, 0xad, 0xc8, 0x49, 0xbc, 0x3c, 0xd0, 0x70, 0xde, 0xb0, 0xf8,
	0x05, 0xbc, 0x2c, 0x5d, 0xe0, 0x6e, 0x85, 0x42, 0x92, 0x18, 0xfa, 0x3b, 0x53, 0x16, 0x25, 0x2b,
	0x24, 0xee, 0x1b, 0x43, 0xdf, 0xc2, 0x19, 0x5b, 0xe2, 0x9e, 0x5c, 0x43, 0x47, 0x1b, 0xc8, 0xb0,
	0x15, 0xb5, 0x13, 0x7f, 0xf2, 0x7f, 0x7c, 0x8a, 0x6d, 0xe3, 0xe4, 0xf6, 0x35, 0x3e, 0x00, 0x64,
	0xe9, 0xb2, 0xa2, 0xb5, 0xdc, 0x70, 0x45, 0x86, 0xd0, 0x93, 0x15, 0xad, 0x19, 0x55, 0xd4, 0x78,
	0x06, 0xf9, 0x8f, 0x26, 0x17, 0x00, 0x1b, 0x2a, 0x58, 0x21, 0x15, 0x55, 0x68, 0x32, 0x06, 0xb9,
	0xa7, 0xc9, 0x52, 0x03, 0x72, 0x03, 0xae, 0x1d, 0x2f, 0xc3, 0x76, 0xe4, 0x24, 0xfe, 0x84, 0xfc,
	0x9a, 0xd8, 0x04, 0xcf, 0x4f, 0x2d, 0xf1, 0x83, 0x5e, 0x27, 0x13, 0xbc, 0xe6, 0x12, 0x49, 0x08,
	0xae, 0xc0, 0xfd, 0x01, 0xa5, 0x6a, 0x86, 0x9e, 0xa4, 0x9e, 0x59, 0xdb, 0x26, 0xfd, 0xdb, 0x5a,
	0x66, 0x4b, 0xaf, 0x21, 0x33, 0x16, 0x4f, 0xc1, 0xcd, 0xd2, 0xc7, 0x4a, 0x89, 0x77, 0x32, 0x80,
	0x0e, 0xea, 0xa2, 0x71, 0xb0, 0xe2, 0x8f, 0xcc, 0xf1, 0x14, 0xce, 0xb3, 0x74, 0x8e, 0x94, 0xa1,
	0x90, 0x9b, 0xb2, 0x7e, 0xd6, 0x8b, 0xe2, 0x02, 0xa5, 0xa4, 0x6b, 0x24, 0x97, 0x10, 0xe8, 0x8b,
	0x6c, 0x8b, 0xad, 0x69, 0x30, 0xc6, 0xbd, 0xdc, 0x37, 0xcc, 0x7e, 0x93, 0x06, 0x1f, 0xc7, 0x91,
	0xf3, 0x79, 0x1c, 0x39, 0x5f, 0xc7, 0x91, 0xb3, 0xea, 0x9a, 0x8b, 0xdf, 0x7d, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xd8, 0xd2, 0xca, 0xd2, 0x21, 0x02, 0x00, 0x00,
}
