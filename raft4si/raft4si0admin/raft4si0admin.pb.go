// Code generated by protoc-gen-gogo.
// source: raft4si0admin.proto
// DO NOT EDIT!

/*
	Package raft4si0admin is a generated protocol buffer package.

	It is generated from these files:
		raft4si0admin.proto

	It has these top-level messages:
		PBMakeSnapshotResponse
		PBNodeInfo
		PBQueryNodesInfoResponse
		PBAddNodeActionRequest
		PBAddNodeActionResponse
		PBUpdateNodeActionRequest
		PBRemoveNodeActionRequest
*/
package raft4si0admin

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import raft4si "github.com/catyguan/csf/raft4si"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request/Response
// Nil Request
type PBMakeSnapshotResponse struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *PBMakeSnapshotResponse) Reset()         { *m = PBMakeSnapshotResponse{} }
func (m *PBMakeSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*PBMakeSnapshotResponse) ProtoMessage()    {}
func (*PBMakeSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{0}
}

// QueryNodesInfo
// nil Request
type PBNodeInfo struct {
	Peer   *raft4si.PBPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Live   bool            `protobuf:"varint,2,opt,name=live,proto3" json:"live,omitempty"`
	Fail   bool            `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Leader bool            `protobuf:"varint,4,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (m *PBNodeInfo) Reset()                    { *m = PBNodeInfo{} }
func (m *PBNodeInfo) String() string            { return proto.CompactTextString(m) }
func (*PBNodeInfo) ProtoMessage()               {}
func (*PBNodeInfo) Descriptor() ([]byte, []int) { return fileDescriptorRaft4Si0Admin, []int{1} }

func (m *PBNodeInfo) GetPeer() *raft4si.PBPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type PBQueryNodesInfoResponse struct {
	NodeInfo    []*PBNodeInfo `protobuf:"bytes,1,rep,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	LocalNodeId uint64        `protobuf:"varint,2,opt,name=local_node_id,json=localNodeId,proto3" json:"local_node_id,omitempty"`
}

func (m *PBQueryNodesInfoResponse) Reset()         { *m = PBQueryNodesInfoResponse{} }
func (m *PBQueryNodesInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PBQueryNodesInfoResponse) ProtoMessage()    {}
func (*PBQueryNodesInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{2}
}

func (m *PBQueryNodesInfoResponse) GetNodeInfo() []*PBNodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

// AddNode
type PBAddNodeActionRequest struct {
	Peer *raft4si.PBPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *PBAddNodeActionRequest) Reset()         { *m = PBAddNodeActionRequest{} }
func (m *PBAddNodeActionRequest) String() string { return proto.CompactTextString(m) }
func (*PBAddNodeActionRequest) ProtoMessage()    {}
func (*PBAddNodeActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{3}
}

func (m *PBAddNodeActionRequest) GetPeer() *raft4si.PBPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type PBAddNodeActionResponse struct {
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *PBAddNodeActionResponse) Reset()         { *m = PBAddNodeActionResponse{} }
func (m *PBAddNodeActionResponse) String() string { return proto.CompactTextString(m) }
func (*PBAddNodeActionResponse) ProtoMessage()    {}
func (*PBAddNodeActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{4}
}

// UpdateNode
type PBUpdateNodeActionRequest struct {
	Peer *raft4si.PBPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *PBUpdateNodeActionRequest) Reset()         { *m = PBUpdateNodeActionRequest{} }
func (m *PBUpdateNodeActionRequest) String() string { return proto.CompactTextString(m) }
func (*PBUpdateNodeActionRequest) ProtoMessage()    {}
func (*PBUpdateNodeActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{5}
}

func (m *PBUpdateNodeActionRequest) GetPeer() *raft4si.PBPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// RemoveNode
type PBRemoveNodeActionRequest struct {
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *PBRemoveNodeActionRequest) Reset()         { *m = PBRemoveNodeActionRequest{} }
func (m *PBRemoveNodeActionRequest) String() string { return proto.CompactTextString(m) }
func (*PBRemoveNodeActionRequest) ProtoMessage()    {}
func (*PBRemoveNodeActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRaft4Si0Admin, []int{6}
}

func init() {
	proto.RegisterType((*PBMakeSnapshotResponse)(nil), "raft4si0admin.PBMakeSnapshotResponse")
	proto.RegisterType((*PBNodeInfo)(nil), "raft4si0admin.PBNodeInfo")
	proto.RegisterType((*PBQueryNodesInfoResponse)(nil), "raft4si0admin.PBQueryNodesInfoResponse")
	proto.RegisterType((*PBAddNodeActionRequest)(nil), "raft4si0admin.PBAddNodeActionRequest")
	proto.RegisterType((*PBAddNodeActionResponse)(nil), "raft4si0admin.PBAddNodeActionResponse")
	proto.RegisterType((*PBUpdateNodeActionRequest)(nil), "raft4si0admin.PBUpdateNodeActionRequest")
	proto.RegisterType((*PBRemoveNodeActionRequest)(nil), "raft4si0admin.PBRemoveNodeActionRequest")
}
func (m *PBMakeSnapshotResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBMakeSnapshotResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.Index))
	}
	return i, nil
}

func (m *PBNodeInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBNodeInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Live {
		data[i] = 0x10
		i++
		if m.Live {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Fail {
		data[i] = 0x18
		i++
		if m.Fail {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Leader {
		data[i] = 0x20
		i++
		if m.Leader {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PBQueryNodesInfoResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBQueryNodesInfoResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, msg := range m.NodeInfo {
			data[i] = 0xa
			i++
			i = encodeVarintRaft4Si0Admin(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LocalNodeId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.LocalNodeId))
	}
	return i, nil
}

func (m *PBAddNodeActionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBAddNodeActionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.Peer.Size()))
		n2, err := m.Peer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PBAddNodeActionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBAddNodeActionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.NodeId))
	}
	return i, nil
}

func (m *PBUpdateNodeActionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBUpdateNodeActionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.Peer.Size()))
		n3, err := m.Peer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PBRemoveNodeActionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBRemoveNodeActionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft4Si0Admin(data, i, uint64(m.NodeId))
	}
	return i, nil
}

func encodeFixed64Raft4Si0Admin(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raft4Si0Admin(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaft4Si0Admin(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PBMakeSnapshotResponse) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRaft4Si0Admin(uint64(m.Index))
	}
	return n
}

func (m *PBNodeInfo) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovRaft4Si0Admin(uint64(l))
	}
	if m.Live {
		n += 2
	}
	if m.Fail {
		n += 2
	}
	if m.Leader {
		n += 2
	}
	return n
}

func (m *PBQueryNodesInfoResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, e := range m.NodeInfo {
			l = e.Size()
			n += 1 + l + sovRaft4Si0Admin(uint64(l))
		}
	}
	if m.LocalNodeId != 0 {
		n += 1 + sovRaft4Si0Admin(uint64(m.LocalNodeId))
	}
	return n
}

func (m *PBAddNodeActionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovRaft4Si0Admin(uint64(l))
	}
	return n
}

func (m *PBAddNodeActionResponse) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRaft4Si0Admin(uint64(m.NodeId))
	}
	return n
}

func (m *PBUpdateNodeActionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovRaft4Si0Admin(uint64(l))
	}
	return n
}

func (m *PBRemoveNodeActionRequest) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRaft4Si0Admin(uint64(m.NodeId))
	}
	return n
}

func sovRaft4Si0Admin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaft4Si0Admin(x uint64) (n int) {
	return sovRaft4Si0Admin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBMakeSnapshotResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBMakeSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBMakeSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBNodeInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &raft4si.PBPeer{}
			}
			if err := m.Peer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Live", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Live = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fail = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBQueryNodesInfoResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBQueryNodesInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBQueryNodesInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfo = append(m.NodeInfo, &PBNodeInfo{})
			if err := m.NodeInfo[len(m.NodeInfo)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalNodeId", wireType)
			}
			m.LocalNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LocalNodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBAddNodeActionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBAddNodeActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBAddNodeActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &raft4si.PBPeer{}
			}
			if err := m.Peer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBAddNodeActionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBAddNodeActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBAddNodeActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBUpdateNodeActionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBUpdateNodeActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBUpdateNodeActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &raft4si.PBPeer{}
			}
			if err := m.Peer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBRemoveNodeActionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBRemoveNodeActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBRemoveNodeActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft4Si0Admin(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft4Si0Admin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft4Si0Admin(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft4Si0Admin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft4Si0Admin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaft4Si0Admin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft4Si0Admin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft4Si0Admin(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft4Si0Admin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft4Si0Admin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft4si0admin.proto", fileDescriptorRaft4Si0Admin) }

var fileDescriptorRaft4Si0Admin = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x4d, 0x3f, 0xfa, 0x21, 0x2e, 0x12, 0x93, 0x4a, 0xa0, 0x70, 0x20, 0xa4, 0x5e, 0xb8, 0xd8,
	0x1a, 0x24, 0xde, 0x4c, 0xa4, 0x37, 0x0f, 0x9a, 0xba, 0xc6, 0x33, 0x59, 0xba, 0xd3, 0xb2, 0xb1,
	0xec, 0x96, 0x76, 0x4b, 0xe4, 0x1f, 0x7a, 0xf4, 0x27, 0x18, 0x7e, 0x89, 0xd9, 0x2d, 0xd5, 0x10,
	0x35, 0x31, 0x9e, 0x3a, 0xf3, 0xe6, 0xcd, 0xbc, 0xd7, 0x97, 0x45, 0x27, 0x19, 0x89, 0xe4, 0x24,
	0x67, 0xe7, 0x84, 0x2e, 0x19, 0x77, 0xd3, 0x4c, 0x48, 0x61, 0xb5, 0xf6, 0xc0, 0x7e, 0x3b, 0x16,
	0xb1, 0xd0, 0x13, 0x4f, 0x55, 0x25, 0xa9, 0x7f, 0x16, 0x33, 0xb9, 0x28, 0xe6, 0x6e, 0x28, 0x96,
	0x5e, 0x48, 0xe4, 0x26, 0x2e, 0x08, 0xf7, 0xc2, 0x3c, 0xf2, 0x76, 0xcb, 0xd5, 0xb7, 0xa4, 0x3b,
	0x2e, 0xea, 0x04, 0xfe, 0x2d, 0x79, 0x82, 0x07, 0x4e, 0xd2, 0x7c, 0x21, 0x24, 0x86, 0x3c, 0x15,
	0x3c, 0x07, 0xab, 0x8d, 0xfe, 0x33, 0x4e, 0xe1, 0xd9, 0x36, 0x86, 0xc6, 0xc8, 0xc4, 0x65, 0xe3,
	0xac, 0x10, 0x0a, 0xfc, 0x3b, 0x41, 0xe1, 0x86, 0x47, 0xc2, 0x3a, 0x45, 0x66, 0x0a, 0x90, 0x69,
	0x4a, 0x73, 0x7c, 0xec, 0x56, 0xb7, 0x03, 0x3f, 0x00, 0xc8, 0xb0, 0x1e, 0x5a, 0x16, 0x32, 0x13,
	0xb6, 0x06, 0xfb, 0xdf, 0xd0, 0x18, 0x35, 0xb0, 0xae, 0x15, 0x16, 0x11, 0x96, 0xd8, 0xb5, 0x12,
	0x53, 0xb5, 0xd5, 0x41, 0xf5, 0x04, 0x08, 0x85, 0xcc, 0x36, 0x35, 0xba, 0xeb, 0x9c, 0x35, 0xb2,
	0x03, 0xff, 0xbe, 0x80, 0x6c, 0xa3, 0x74, 0x73, 0x25, 0xfc, 0x61, 0xf2, 0x12, 0x1d, 0x72, 0x41,
	0x61, 0xc6, 0x78, 0x24, 0x6c, 0x63, 0x58, 0x1b, 0x35, 0xc7, 0x3d, 0x77, 0x3f, 0xbb, 0x4f, 0xbb,
	0xb8, 0xc1, 0x2b, 0xe3, 0x0e, 0x6a, 0x25, 0x22, 0x24, 0xc9, 0xac, 0xdc, 0xa6, 0xda, 0x9c, 0x89,
	0x9b, 0x1a, 0xd4, 0x7c, 0xea, 0x5c, 0xa9, 0x68, 0xa6, 0x94, 0xaa, 0x76, 0x1a, 0x4a, 0x26, 0x38,
	0x86, 0x55, 0x01, 0xb9, 0xfc, 0xd5, 0x6f, 0x3b, 0x63, 0xd4, 0xfd, 0xb2, 0xbe, 0x73, 0xdd, 0x45,
	0x07, 0x95, 0x6e, 0x19, 0x6e, 0x9d, 0x97, 0x92, 0xd7, 0xa8, 0x17, 0xf8, 0x8f, 0x29, 0x25, 0x12,
	0xfe, 0xa8, 0x3a, 0x51, 0x17, 0x30, 0x2c, 0xc5, 0xfa, 0x9b, 0x0b, 0x3f, 0xe9, 0xfa, 0x47, 0x2f,
	0xdb, 0x81, 0xf1, 0xba, 0x1d, 0x18, 0x6f, 0xdb, 0x81, 0x31, 0xaf, 0xeb, 0xa7, 0x71, 0xf1, 0x1e,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0x3c, 0xab, 0xc6, 0x85, 0x02, 0x00, 0x00,
}
