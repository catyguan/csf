// Code generated by protoc-gen-gogo.
// source: masterslave.proto
// DO NOT EDIT!

/*
	Package masterslave is a generated protocol buffer package.

	It is generated from these files:
		masterslave.proto

	It has these top-level messages:
		PBRequestFollow
		PBLastSnapshot
		PBResponseFollow
*/
package masterslave

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PBRequestFollow struct {
	SessionId uint64 `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (m *PBRequestFollow) Reset()                    { *m = PBRequestFollow{} }
func (m *PBRequestFollow) String() string            { return proto.CompactTextString(m) }
func (*PBRequestFollow) ProtoMessage()               {}
func (*PBRequestFollow) Descriptor() ([]byte, []int) { return fileDescriptorMasterslave, []int{0} }

type PBLastSnapshot struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PBLastSnapshot) Reset()                    { *m = PBLastSnapshot{} }
func (m *PBLastSnapshot) String() string            { return proto.CompactTextString(m) }
func (*PBLastSnapshot) ProtoMessage()               {}
func (*PBLastSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorMasterslave, []int{1} }

type PBResponseFollow struct {
	SessionId uint64          `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Snapshot  *PBLastSnapshot `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	Requests  [][]byte        `protobuf:"bytes,3,rep,name=requests" json:"requests,omitempty"`
}

func (m *PBResponseFollow) Reset()                    { *m = PBResponseFollow{} }
func (m *PBResponseFollow) String() string            { return proto.CompactTextString(m) }
func (*PBResponseFollow) ProtoMessage()               {}
func (*PBResponseFollow) Descriptor() ([]byte, []int) { return fileDescriptorMasterslave, []int{2} }

func (m *PBResponseFollow) GetSnapshot() *PBLastSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func init() {
	proto.RegisterType((*PBRequestFollow)(nil), "masterslave.PBRequestFollow")
	proto.RegisterType((*PBLastSnapshot)(nil), "masterslave.PBLastSnapshot")
	proto.RegisterType((*PBResponseFollow)(nil), "masterslave.PBResponseFollow")
}
func (m *PBRequestFollow) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBRequestFollow) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMasterslave(data, i, uint64(m.SessionId))
	}
	return i, nil
}

func (m *PBLastSnapshot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBLastSnapshot) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMasterslave(data, i, uint64(m.Index))
	}
	if len(m.Data) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintMasterslave(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *PBResponseFollow) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PBResponseFollow) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMasterslave(data, i, uint64(m.SessionId))
	}
	if m.Snapshot != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMasterslave(data, i, uint64(m.Snapshot.Size()))
		n1, err := m.Snapshot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Requests) > 0 {
		for _, b := range m.Requests {
			data[i] = 0x1a
			i++
			i = encodeVarintMasterslave(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	return i, nil
}

func encodeFixed64Masterslave(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Masterslave(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMasterslave(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PBRequestFollow) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovMasterslave(uint64(m.SessionId))
	}
	return n
}

func (m *PBLastSnapshot) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMasterslave(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMasterslave(uint64(l))
	}
	return n
}

func (m *PBResponseFollow) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovMasterslave(uint64(m.SessionId))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovMasterslave(uint64(l))
	}
	if len(m.Requests) > 0 {
		for _, b := range m.Requests {
			l = len(b)
			n += 1 + l + sovMasterslave(uint64(l))
		}
	}
	return n
}

func sovMasterslave(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMasterslave(x uint64) (n int) {
	return sovMasterslave(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBRequestFollow) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterslave
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBRequestFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBRequestFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterslave(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterslave
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBLastSnapshot) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterslave
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBLastSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBLastSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMasterslave
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterslave(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterslave
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBResponseFollow) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterslave
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBResponseFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBResponseFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMasterslave
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &PBLastSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMasterslave
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, make([]byte, postIndex-iNdEx))
			copy(m.Requests[len(m.Requests)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterslave(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterslave
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMasterslave(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMasterslave
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterslave
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMasterslave
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMasterslave
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMasterslave(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMasterslave = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMasterslave   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("masterslave.proto", fileDescriptorMasterslave) }

var fileDescriptorMasterslave = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0x2c, 0x2e,
	0x49, 0x2d, 0x2a, 0xce, 0x49, 0x2c, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xeb, 0x83, 0x58, 0x10, 0x25, 0x4a, 0xfa,
	0x5c, 0xfc, 0x01, 0x4e, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x6e, 0xf9, 0x39, 0x39, 0xf9,
	0xe5, 0x42, 0x32, 0x5c, 0x9c, 0xc5, 0xa9, 0xc5, 0xc5, 0x99, 0xf9, 0x79, 0x9e, 0x29, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x08, 0x01, 0x25, 0x2b, 0x2e, 0xbe, 0x00, 0x27, 0x9f, 0xc4, 0xe2,
	0x92, 0xe0, 0xbc, 0xc4, 0x82, 0xe2, 0x8c, 0xfc, 0x12, 0x21, 0x11, 0x2e, 0xd6, 0xcc, 0xbc, 0x94,
	0xd4, 0x0a, 0x09, 0x46, 0xb0, 0x5a, 0x08, 0x47, 0x48, 0x88, 0x8b, 0x25, 0x25, 0xb1, 0x24, 0x11,
	0x6c, 0x00, 0x4f, 0x10, 0x98, 0xad, 0xd4, 0xca, 0xc8, 0x25, 0x00, 0xb2, 0xad, 0xb8, 0x20, 0x3f,
	0xaf, 0x38, 0x15, 0x9b, 0x75, 0x8c, 0x68, 0xd6, 0x09, 0x99, 0x73, 0x71, 0x14, 0x43, 0x2d, 0x02,
	0x1b, 0xc5, 0x6d, 0x24, 0xad, 0x87, 0xec, 0x51, 0x54, 0xb7, 0x04, 0xc1, 0x15, 0x0b, 0x49, 0x71,
	0x71, 0x14, 0x41, 0xbc, 0x55, 0x2c, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x13, 0x04, 0xe7, 0x3b, 0xf1,
	0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x49, 0x6c, 0xe0,
	0x90, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x60, 0xc8, 0x80, 0x41, 0x01, 0x00, 0x00,
}
