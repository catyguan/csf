// Code generated by protoc-gen-gogo.
// source: alarm.proto
// DO NOT EDIT!

/*
	Package alarmpb is a generated protocol buffer package.

	It is generated from these files:
		alarm.proto

	It has these top-level messages:
		AlarmRequest
		AlarmMember
		AlarmResponse
*/
package alarmpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import basepb "github.com/catyguan/csf/basepb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AlarmType int32

const (
	NONE    AlarmType = 0
	NOSPACE AlarmType = 1
)

var AlarmType_name = map[int32]string{
	0: "NONE",
	1: "NOSPACE",
}
var AlarmType_value = map[string]int32{
	"NONE":    0,
	"NOSPACE": 1,
}

func (x AlarmType) String() string {
	return proto.EnumName(AlarmType_name, int32(x))
}
func (AlarmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarm, []int{0} }

type AlarmRequest_AlarmAction int32

const (
	GET        AlarmRequest_AlarmAction = 0
	ACTIVATE   AlarmRequest_AlarmAction = 1
	DEACTIVATE AlarmRequest_AlarmAction = 2
)

var AlarmRequest_AlarmAction_name = map[int32]string{
	0: "GET",
	1: "ACTIVATE",
	2: "DEACTIVATE",
}
var AlarmRequest_AlarmAction_value = map[string]int32{
	"GET":        0,
	"ACTIVATE":   1,
	"DEACTIVATE": 2,
}

func (x AlarmRequest_AlarmAction) String() string {
	return proto.EnumName(AlarmRequest_AlarmAction_name, int32(x))
}
func (AlarmRequest_AlarmAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAlarm, []int{0, 0}
}

type AlarmRequest struct {
	// action is the kind of alarm request to issue. The action
	// may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a
	// raised alarm.
	Action AlarmRequest_AlarmAction `protobuf:"varint,1,opt,name=action,proto3,enum=alarmpb.AlarmRequest_AlarmAction" json:"action,omitempty"`
	// memberID is the ID of the member associated with the alarm. If memberID is 0, the
	// alarm request covers all members.
	MemberID uint64 `protobuf:"varint,2,opt,name=memberID,proto3" json:"memberID,omitempty"`
	// alarm is the type of alarm to consider for this request.
	Alarm AlarmType `protobuf:"varint,3,opt,name=alarm,proto3,enum=alarmpb.AlarmType" json:"alarm,omitempty"`
}

func (m *AlarmRequest) Reset()                    { *m = AlarmRequest{} }
func (m *AlarmRequest) String() string            { return proto.CompactTextString(m) }
func (*AlarmRequest) ProtoMessage()               {}
func (*AlarmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarm, []int{0} }

type AlarmMember struct {
	// memberID is the ID of the member associated with the raised alarm.
	MemberID uint64 `protobuf:"varint,1,opt,name=memberID,proto3" json:"memberID,omitempty"`
	// alarm is the type of alarm which has been raised.
	Alarm AlarmType `protobuf:"varint,2,opt,name=alarm,proto3,enum=alarmpb.AlarmType" json:"alarm,omitempty"`
}

func (m *AlarmMember) Reset()                    { *m = AlarmMember{} }
func (m *AlarmMember) String() string            { return proto.CompactTextString(m) }
func (*AlarmMember) ProtoMessage()               {}
func (*AlarmMember) Descriptor() ([]byte, []int) { return fileDescriptorAlarm, []int{1} }

type AlarmResponse struct {
	Header *basepb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// alarms is a list of alarms associated with the alarm request.
	Alarms []*AlarmMember `protobuf:"bytes,2,rep,name=alarms" json:"alarms,omitempty"`
}

func (m *AlarmResponse) Reset()                    { *m = AlarmResponse{} }
func (m *AlarmResponse) String() string            { return proto.CompactTextString(m) }
func (*AlarmResponse) ProtoMessage()               {}
func (*AlarmResponse) Descriptor() ([]byte, []int) { return fileDescriptorAlarm, []int{2} }

func init() {
	proto.RegisterType((*AlarmRequest)(nil), "alarmpb.AlarmRequest")
	proto.RegisterType((*AlarmMember)(nil), "alarmpb.AlarmMember")
	proto.RegisterType((*AlarmResponse)(nil), "alarmpb.AlarmResponse")
	proto.RegisterEnum("alarmpb.AlarmType", AlarmType_name, AlarmType_value)
	proto.RegisterEnum("alarmpb.AlarmRequest_AlarmAction", AlarmRequest_AlarmAction_name, AlarmRequest_AlarmAction_value)
}
func (m *AlarmRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AlarmRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintAlarm(data, i, uint64(m.Action))
	}
	if m.MemberID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintAlarm(data, i, uint64(m.MemberID))
	}
	if m.Alarm != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintAlarm(data, i, uint64(m.Alarm))
	}
	return i, nil
}

func (m *AlarmMember) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AlarmMember) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MemberID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintAlarm(data, i, uint64(m.MemberID))
	}
	if m.Alarm != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintAlarm(data, i, uint64(m.Alarm))
	}
	return i, nil
}

func (m *AlarmResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AlarmResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAlarm(data, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Alarms) > 0 {
		for _, msg := range m.Alarms {
			data[i] = 0x12
			i++
			i = encodeVarintAlarm(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Alarm(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Alarm(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAlarm(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *AlarmRequest) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovAlarm(uint64(m.Action))
	}
	if m.MemberID != 0 {
		n += 1 + sovAlarm(uint64(m.MemberID))
	}
	if m.Alarm != 0 {
		n += 1 + sovAlarm(uint64(m.Alarm))
	}
	return n
}

func (m *AlarmMember) Size() (n int) {
	var l int
	_ = l
	if m.MemberID != 0 {
		n += 1 + sovAlarm(uint64(m.MemberID))
	}
	if m.Alarm != 0 {
		n += 1 + sovAlarm(uint64(m.Alarm))
	}
	return n
}

func (m *AlarmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAlarm(uint64(l))
	}
	if len(m.Alarms) > 0 {
		for _, e := range m.Alarms {
			l = e.Size()
			n += 1 + l + sovAlarm(uint64(l))
		}
	}
	return n
}

func sovAlarm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAlarm(x uint64) (n int) {
	return sovAlarm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlarmRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Action |= (AlarmRequest_AlarmAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			m.MemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemberID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarm", wireType)
			}
			m.Alarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Alarm |= (AlarmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarm(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlarmMember) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			m.MemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemberID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarm", wireType)
			}
			m.Alarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Alarm |= (AlarmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarm(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlarmResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &basepb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alarms = append(m.Alarms, &AlarmMember{})
			if err := m.Alarms[len(m.Alarms)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarm(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarm(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAlarm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlarm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlarm(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlarm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("alarm.proto", fileDescriptorAlarm) }

var fileDescriptorAlarm = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4f, 0xfa, 0x30,
	0x18, 0xc6, 0xd7, 0xc1, 0x7f, 0xf0, 0x7f, 0x87, 0x64, 0x69, 0x88, 0x59, 0x38, 0x2c, 0xb8, 0xd3,
	0x34, 0xa6, 0x4b, 0xd0, 0x8b, 0xc7, 0x09, 0x8b, 0x72, 0x10, 0xcc, 0x58, 0xbc, 0x77, 0xb3, 0x0e,
	0x12, 0x47, 0xe7, 0x36, 0x0e, 0x7c, 0x40, 0x13, 0x8e, 0x7c, 0x04, 0xe1, 0x93, 0x18, 0xba, 0x4a,
	0xe0, 0x60, 0x3c, 0xb5, 0x4f, 0xdf, 0xe7, 0xfd, 0xbd, 0x4f, 0x5b, 0xd0, 0xe9, 0x3b, 0xcd, 0x53,
	0x92, 0xe5, 0xbc, 0xe4, 0xb8, 0x21, 0x44, 0x16, 0x75, 0x3b, 0x09, 0x4f, 0xb8, 0x38, 0x73, 0xf7,
	0xbb, 0xaa, 0xdc, 0xbd, 0x4c, 0xe6, 0xe5, 0x6c, 0x19, 0x91, 0x98, 0xa7, 0x6e, 0x4c, 0xcb, 0x55,
	0xb2, 0xa4, 0x0b, 0x37, 0x2e, 0xde, 0xdc, 0x88, 0x16, 0x2c, 0x8b, 0xc4, 0x52, 0x59, 0xed, 0x4f,
	0x04, 0x2d, 0x6f, 0x0f, 0x0b, 0xd8, 0xc7, 0x92, 0x15, 0x25, 0xbe, 0x03, 0x8d, 0xc6, 0xe5, 0x9c,
	0x2f, 0x4c, 0xd4, 0x43, 0x4e, 0xbb, 0x7f, 0x41, 0xe4, 0x2c, 0x72, 0x6c, 0xab, 0x84, 0x27, 0x8c,
	0x81, 0x6c, 0xc0, 0x5d, 0x68, 0xa6, 0x2c, 0x8d, 0x58, 0x3e, 0x1a, 0x9a, 0x6a, 0x0f, 0x39, 0xf5,
	0xe0, 0xa0, 0xb1, 0x03, 0xff, 0x04, 0xc7, 0xac, 0x09, 0x2a, 0x3e, 0xa5, 0x86, 0xab, 0x8c, 0x05,
	0x95, 0xc1, 0xbe, 0x05, 0xfd, 0x08, 0x8e, 0x1b, 0x50, 0x7b, 0xf0, 0x43, 0x43, 0xc1, 0x2d, 0x68,
	0x7a, 0x83, 0x70, 0xf4, 0xe2, 0x85, 0xbe, 0x81, 0x70, 0x1b, 0x60, 0xe8, 0x1f, 0xb4, 0x6a, 0x4f,
	0x65, 0xd7, 0x93, 0x18, 0x78, 0x12, 0x05, 0xfd, 0x16, 0x45, 0xfd, 0x2b, 0x4a, 0x0a, 0x67, 0xf2,
	0xd2, 0x45, 0xc6, 0x17, 0x05, 0xc3, 0x04, 0xb4, 0x19, 0xa3, 0xaf, 0x2c, 0x17, 0x50, 0xbd, 0x7f,
	0x4e, 0xaa, 0x17, 0x25, 0x3f, 0x8e, 0x47, 0x51, 0x0d, 0xa4, 0x0b, 0x5f, 0x83, 0x26, 0x48, 0x85,
	0xa9, 0xf6, 0x6a, 0x8e, 0xde, 0xef, 0x9c, 0xce, 0xaa, 0xc2, 0x06, 0xd2, 0x73, 0x65, 0xc3, 0xff,
	0x43, 0x04, 0xdc, 0x84, 0xfa, 0x78, 0x32, 0xf6, 0x0d, 0x05, 0xeb, 0xd0, 0x18, 0x4f, 0xa6, 0xcf,
	0xde, 0xc0, 0x37, 0xd0, 0x7d, 0x67, 0xbd, 0xb5, 0x94, 0xcd, 0xd6, 0x52, 0xd6, 0x3b, 0x0b, 0x6d,
	0x76, 0x16, 0xfa, 0xda, 0x59, 0x28, 0xd2, 0xc4, 0x67, 0xde, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x60, 0x3e, 0xce, 0x93, 0x25, 0x02, 0x00, 0x00,
}
